import { useState, useCallback } from 'react';
import { huggingFaceService, HFResponse, HFModelInfo } from '../services/huggingFaceService';
import toast from 'react-hot-toast';

export interface UseHuggingFaceReturn {
  // State
  isLoading: boolean;
  isConfigured: boolean;
  error: string | null;
  lastResponse: HFResponse | null;
  
  // Configuration
  configStatus: {
    configured: boolean;
    availableModels: number;
    categories: string[];
  };
  availableModels: HFModelInfo[];
  
  // Actions
  sendMessage: (model: string, message: string, systemPrompt?: string) => Promise<string>;
  getAgentRecommendations: (model: string, systemMetrics: any) => Promise<string>;
  analyzeAgentPerformance: (model: string, agentData: any) => Promise<string>;
  generateStrategicInsights: (model: string, businessMetrics: any) => Promise<string>;
  generateCode: (model: string, prompt: string, context?: string) => Promise<string>;
  
  // Utilities
  clearError: () => void;
  getModelsByCategory: (category: 'textGeneration' | 'codeGeneration' | 'businessAnalysis') => HFModelInfo[];
}

export const useHuggingFace = (): UseHuggingFaceReturn => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastResponse, setLastResponse] = useState<HFResponse | null>(null);

  const configStatus = huggingFaceService.getConfigStatus();
  const availableModels = huggingFaceService.getAvailableModels();

  const handleError = useCallback((err: Error) => {
    setError(err.message);
    toast.error(`Hugging Face API Error: ${err.message}`);
  }, []);

  const sendMessage = useCallback(async (
    model: string,
    message: string, 
    systemPrompt?: string
  ): Promise<string> => {
    if (!configStatus.configured) {
      const errorMsg = 'Hugging Face API is not configured. Please set VITE_HUGGINGFACE_API_KEY in your environment variables.';
      setError(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await huggingFaceService.sendMessage(model, message, systemPrompt);
      setLastResponse(response);
      toast.success(`Message sent to ${model} successfully`);
      return response.content;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Unknown error');
      handleError(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [configStatus.configured, handleError]);

  const getAgentRecommendations = useCallback(async (
    model: string,
    systemMetrics: any
  ): Promise<string> => {
    if (!configStatus.configured) {
      const errorMsg = 'Hugging Face API is not configured. Please set VITE_HUGGINGFACE_API_KEY in your environment variables.';
      setError(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await huggingFaceService.getAgentRecommendations(model, systemMetrics);
      toast.success(`Agent recommendations generated by ${model}`);
      return response;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Unknown error');
      handleError(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [configStatus.configured, handleError]);

  const analyzeAgentPerformance = useCallback(async (
    model: string,
    agentData: any
  ): Promise<string> => {
    if (!configStatus.configured) {
      const errorMsg = 'Hugging Face API is not configured. Please set VITE_HUGGINGFACE_API_KEY in your environment variables.';
      setError(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await huggingFaceService.analyzeAgentPerformance(model, agentData);
      toast.success(`Agent performance analyzed by ${model}`);
      return response;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Unknown error');
      handleError(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [configStatus.configured, handleError]);

  const generateStrategicInsights = useCallback(async (
    model: string,
    businessMetrics: any
  ): Promise<string> => {
    if (!configStatus.configured) {
      const errorMsg = 'Hugging Face API is not configured. Please set VITE_HUGGINGFACE_API_KEY in your environment variables.';
      setError(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await huggingFaceService.generateStrategicInsights(model, businessMetrics);
      toast.success(`Strategic insights generated by ${model}`);
      return response;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Unknown error');
      handleError(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [configStatus.configured, handleError]);

  const generateCode = useCallback(async (
    model: string,
    prompt: string,
    context?: string
  ): Promise<string> => {
    if (!configStatus.configured) {
      const errorMsg = 'Hugging Face API is not configured. Please set VITE_HUGGINGFACE_API_KEY in your environment variables.';
      setError(errorMsg);
      toast.error(errorMsg);
      throw new Error(errorMsg);
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await huggingFaceService.generateCode(model, prompt, context);
      toast.success(`Code generated by ${model}`);
      return response;
    } catch (err) {
      const error = err instanceof Error ? err : new Error('Unknown error');
      handleError(error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [configStatus.configured, handleError]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const getModelsByCategory = useCallback((
    category: 'textGeneration' | 'codeGeneration' | 'businessAnalysis'
  ): HFModelInfo[] => {
    return availableModels.filter(model => model.category === category);
  }, [availableModels]);

  return {
    // State
    isLoading,
    isConfigured: configStatus.configured,
    error,
    lastResponse,
    
    // Configuration
    configStatus,
    availableModels,
    
    // Actions
    sendMessage,
    getAgentRecommendations,
    analyzeAgentPerformance,
    generateStrategicInsights,
    generateCode,
    
    // Utilities
    clearError,
    getModelsByCategory,
  };
};
